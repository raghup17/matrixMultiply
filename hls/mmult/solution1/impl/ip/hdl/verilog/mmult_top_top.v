// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module mmult_top_top (
m_axi_a_AWID,
m_axi_a_AWADDR,
m_axi_a_AWLEN,
m_axi_a_AWSIZE,
m_axi_a_AWBURST,
m_axi_a_AWLOCK,
m_axi_a_AWCACHE,
m_axi_a_AWPROT,
m_axi_a_AWQOS,
m_axi_a_AWUSER,
m_axi_a_AWVALID,
m_axi_a_AWREADY,
m_axi_a_WDATA,
m_axi_a_WSTRB,
m_axi_a_WLAST,
m_axi_a_WUSER,
m_axi_a_WVALID,
m_axi_a_WREADY,
m_axi_a_BID,
m_axi_a_BRESP,
m_axi_a_BUSER,
m_axi_a_BVALID,
m_axi_a_BREADY,
m_axi_a_ARID,
m_axi_a_ARADDR,
m_axi_a_ARLEN,
m_axi_a_ARSIZE,
m_axi_a_ARBURST,
m_axi_a_ARLOCK,
m_axi_a_ARCACHE,
m_axi_a_ARPROT,
m_axi_a_ARQOS,
m_axi_a_ARUSER,
m_axi_a_ARVALID,
m_axi_a_ARREADY,
m_axi_a_RID,
m_axi_a_RDATA,
m_axi_a_RRESP,
m_axi_a_RLAST,
m_axi_a_RUSER,
m_axi_a_RVALID,
m_axi_a_RREADY,
m_axi_b_AWID,
m_axi_b_AWADDR,
m_axi_b_AWLEN,
m_axi_b_AWSIZE,
m_axi_b_AWBURST,
m_axi_b_AWLOCK,
m_axi_b_AWCACHE,
m_axi_b_AWPROT,
m_axi_b_AWQOS,
m_axi_b_AWUSER,
m_axi_b_AWVALID,
m_axi_b_AWREADY,
m_axi_b_WDATA,
m_axi_b_WSTRB,
m_axi_b_WLAST,
m_axi_b_WUSER,
m_axi_b_WVALID,
m_axi_b_WREADY,
m_axi_b_BID,
m_axi_b_BRESP,
m_axi_b_BUSER,
m_axi_b_BVALID,
m_axi_b_BREADY,
m_axi_b_ARID,
m_axi_b_ARADDR,
m_axi_b_ARLEN,
m_axi_b_ARSIZE,
m_axi_b_ARBURST,
m_axi_b_ARLOCK,
m_axi_b_ARCACHE,
m_axi_b_ARPROT,
m_axi_b_ARQOS,
m_axi_b_ARUSER,
m_axi_b_ARVALID,
m_axi_b_ARREADY,
m_axi_b_RID,
m_axi_b_RDATA,
m_axi_b_RRESP,
m_axi_b_RLAST,
m_axi_b_RUSER,
m_axi_b_RVALID,
m_axi_b_RREADY,
m_axi_c_AWID,
m_axi_c_AWADDR,
m_axi_c_AWLEN,
m_axi_c_AWSIZE,
m_axi_c_AWBURST,
m_axi_c_AWLOCK,
m_axi_c_AWCACHE,
m_axi_c_AWPROT,
m_axi_c_AWQOS,
m_axi_c_AWUSER,
m_axi_c_AWVALID,
m_axi_c_AWREADY,
m_axi_c_WDATA,
m_axi_c_WSTRB,
m_axi_c_WLAST,
m_axi_c_WUSER,
m_axi_c_WVALID,
m_axi_c_WREADY,
m_axi_c_BID,
m_axi_c_BRESP,
m_axi_c_BUSER,
m_axi_c_BVALID,
m_axi_c_BREADY,
m_axi_c_ARID,
m_axi_c_ARADDR,
m_axi_c_ARLEN,
m_axi_c_ARSIZE,
m_axi_c_ARBURST,
m_axi_c_ARLOCK,
m_axi_c_ARCACHE,
m_axi_c_ARPROT,
m_axi_c_ARQOS,
m_axi_c_ARUSER,
m_axi_c_ARVALID,
m_axi_c_ARREADY,
m_axi_c_RID,
m_axi_c_RDATA,
m_axi_c_RRESP,
m_axi_c_RLAST,
m_axi_c_RUSER,
m_axi_c_RVALID,
m_axi_c_RREADY,
s_axi_CONTROL_AWADDR,
s_axi_CONTROL_AWVALID,
s_axi_CONTROL_AWREADY,
s_axi_CONTROL_WDATA,
s_axi_CONTROL_WSTRB,
s_axi_CONTROL_WVALID,
s_axi_CONTROL_WREADY,
s_axi_CONTROL_BRESP,
s_axi_CONTROL_BVALID,
s_axi_CONTROL_BREADY,
s_axi_CONTROL_ARADDR,
s_axi_CONTROL_ARVALID,
s_axi_CONTROL_ARREADY,
s_axi_CONTROL_RDATA,
s_axi_CONTROL_RRESP,
s_axi_CONTROL_RVALID,
s_axi_CONTROL_RREADY,
interrupt,
aresetn,
aclk
);

parameter C_M_AXI_A_ID_WIDTH = 1;
parameter C_M_AXI_A_ADDR_WIDTH = 32;
parameter C_M_AXI_A_DATA_WIDTH = 256;
parameter C_M_AXI_A_AWUSER_WIDTH = 1;
parameter C_M_AXI_A_ARUSER_WIDTH = 1;
parameter C_M_AXI_A_WUSER_WIDTH = 1;
parameter C_M_AXI_A_RUSER_WIDTH = 1;
parameter C_M_AXI_A_BUSER_WIDTH = 1;
parameter C_M_AXI_A_USER_DATA_WIDTH = 256;
parameter C_M_AXI_A_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_A_USER_VALUE = 1'b0;
parameter C_M_AXI_A_PROT_VALUE = 3'b010;
parameter C_M_AXI_A_CACHE_VALUE = 4'b0000;
parameter C_M_AXI_B_ID_WIDTH = 1;
parameter C_M_AXI_B_ADDR_WIDTH = 32;
parameter C_M_AXI_B_DATA_WIDTH = 256;
parameter C_M_AXI_B_AWUSER_WIDTH = 1;
parameter C_M_AXI_B_ARUSER_WIDTH = 1;
parameter C_M_AXI_B_WUSER_WIDTH = 1;
parameter C_M_AXI_B_RUSER_WIDTH = 1;
parameter C_M_AXI_B_BUSER_WIDTH = 1;
parameter C_M_AXI_B_USER_DATA_WIDTH = 256;
parameter C_M_AXI_B_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_B_USER_VALUE = 1'b0;
parameter C_M_AXI_B_PROT_VALUE = 3'b010;
parameter C_M_AXI_B_CACHE_VALUE = 4'b0000;
parameter C_M_AXI_C_ID_WIDTH = 1;
parameter C_M_AXI_C_ADDR_WIDTH = 32;
parameter C_M_AXI_C_DATA_WIDTH = 256;
parameter C_M_AXI_C_AWUSER_WIDTH = 1;
parameter C_M_AXI_C_ARUSER_WIDTH = 1;
parameter C_M_AXI_C_WUSER_WIDTH = 1;
parameter C_M_AXI_C_RUSER_WIDTH = 1;
parameter C_M_AXI_C_BUSER_WIDTH = 1;
parameter C_M_AXI_C_USER_DATA_WIDTH = 256;
parameter C_M_AXI_C_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_C_USER_VALUE = 1'b0;
parameter C_M_AXI_C_PROT_VALUE = 3'b010;
parameter C_M_AXI_C_CACHE_VALUE = 4'b0000;
parameter C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter RESET_ACTIVE_LOW = 1;

output [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_AWID ;
output [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_AWADDR ;
output [8 - 1:0] m_axi_a_AWLEN ;
output [3 - 1:0] m_axi_a_AWSIZE ;
output [2 - 1:0] m_axi_a_AWBURST ;
output [2 - 1:0] m_axi_a_AWLOCK ;
output [4 - 1:0] m_axi_a_AWCACHE ;
output [3 - 1:0] m_axi_a_AWPROT ;
output [4 - 1:0] m_axi_a_AWQOS ;
output [C_M_AXI_A_AWUSER_WIDTH - 1:0] m_axi_a_AWUSER ;
output m_axi_a_AWVALID ;
input m_axi_a_AWREADY ;
output [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_WDATA ;
output [C_M_AXI_A_DATA_WIDTH/8 - 1:0] m_axi_a_WSTRB ;
output m_axi_a_WLAST ;
output [C_M_AXI_A_WUSER_WIDTH - 1:0] m_axi_a_WUSER ;
output m_axi_a_WVALID ;
input m_axi_a_WREADY ;
input [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_BID ;
input [2 - 1:0] m_axi_a_BRESP ;
input [C_M_AXI_A_BUSER_WIDTH - 1:0] m_axi_a_BUSER ;
input m_axi_a_BVALID ;
output m_axi_a_BREADY ;
output [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_ARID ;
output [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_ARADDR ;
output [8 - 1:0] m_axi_a_ARLEN ;
output [3 - 1:0] m_axi_a_ARSIZE ;
output [2 - 1:0] m_axi_a_ARBURST ;
output [2 - 1:0] m_axi_a_ARLOCK ;
output [4 - 1:0] m_axi_a_ARCACHE ;
output [3 - 1:0] m_axi_a_ARPROT ;
output [4 - 1:0] m_axi_a_ARQOS ;
output [C_M_AXI_A_ARUSER_WIDTH - 1:0] m_axi_a_ARUSER ;
output m_axi_a_ARVALID ;
input m_axi_a_ARREADY ;
input [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_RID ;
input [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_RDATA ;
input [2 - 1:0] m_axi_a_RRESP ;
input m_axi_a_RLAST ;
input [C_M_AXI_A_RUSER_WIDTH - 1:0] m_axi_a_RUSER ;
input m_axi_a_RVALID ;
output m_axi_a_RREADY ;


output [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_AWID ;
output [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_AWADDR ;
output [8 - 1:0] m_axi_b_AWLEN ;
output [3 - 1:0] m_axi_b_AWSIZE ;
output [2 - 1:0] m_axi_b_AWBURST ;
output [2 - 1:0] m_axi_b_AWLOCK ;
output [4 - 1:0] m_axi_b_AWCACHE ;
output [3 - 1:0] m_axi_b_AWPROT ;
output [4 - 1:0] m_axi_b_AWQOS ;
output [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_b_AWUSER ;
output m_axi_b_AWVALID ;
input m_axi_b_AWREADY ;
output [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_WDATA ;
output [C_M_AXI_B_DATA_WIDTH/8 - 1:0] m_axi_b_WSTRB ;
output m_axi_b_WLAST ;
output [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_b_WUSER ;
output m_axi_b_WVALID ;
input m_axi_b_WREADY ;
input [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_BID ;
input [2 - 1:0] m_axi_b_BRESP ;
input [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_b_BUSER ;
input m_axi_b_BVALID ;
output m_axi_b_BREADY ;
output [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_ARID ;
output [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_ARADDR ;
output [8 - 1:0] m_axi_b_ARLEN ;
output [3 - 1:0] m_axi_b_ARSIZE ;
output [2 - 1:0] m_axi_b_ARBURST ;
output [2 - 1:0] m_axi_b_ARLOCK ;
output [4 - 1:0] m_axi_b_ARCACHE ;
output [3 - 1:0] m_axi_b_ARPROT ;
output [4 - 1:0] m_axi_b_ARQOS ;
output [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_b_ARUSER ;
output m_axi_b_ARVALID ;
input m_axi_b_ARREADY ;
input [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_RID ;
input [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_RDATA ;
input [2 - 1:0] m_axi_b_RRESP ;
input m_axi_b_RLAST ;
input [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_b_RUSER ;
input m_axi_b_RVALID ;
output m_axi_b_RREADY ;


output [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_AWID ;
output [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_AWADDR ;
output [8 - 1:0] m_axi_c_AWLEN ;
output [3 - 1:0] m_axi_c_AWSIZE ;
output [2 - 1:0] m_axi_c_AWBURST ;
output [2 - 1:0] m_axi_c_AWLOCK ;
output [4 - 1:0] m_axi_c_AWCACHE ;
output [3 - 1:0] m_axi_c_AWPROT ;
output [4 - 1:0] m_axi_c_AWQOS ;
output [C_M_AXI_C_AWUSER_WIDTH - 1:0] m_axi_c_AWUSER ;
output m_axi_c_AWVALID ;
input m_axi_c_AWREADY ;
output [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_WDATA ;
output [C_M_AXI_C_DATA_WIDTH/8 - 1:0] m_axi_c_WSTRB ;
output m_axi_c_WLAST ;
output [C_M_AXI_C_WUSER_WIDTH - 1:0] m_axi_c_WUSER ;
output m_axi_c_WVALID ;
input m_axi_c_WREADY ;
input [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_BID ;
input [2 - 1:0] m_axi_c_BRESP ;
input [C_M_AXI_C_BUSER_WIDTH - 1:0] m_axi_c_BUSER ;
input m_axi_c_BVALID ;
output m_axi_c_BREADY ;
output [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_ARID ;
output [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_ARADDR ;
output [8 - 1:0] m_axi_c_ARLEN ;
output [3 - 1:0] m_axi_c_ARSIZE ;
output [2 - 1:0] m_axi_c_ARBURST ;
output [2 - 1:0] m_axi_c_ARLOCK ;
output [4 - 1:0] m_axi_c_ARCACHE ;
output [3 - 1:0] m_axi_c_ARPROT ;
output [4 - 1:0] m_axi_c_ARQOS ;
output [C_M_AXI_C_ARUSER_WIDTH - 1:0] m_axi_c_ARUSER ;
output m_axi_c_ARVALID ;
input m_axi_c_ARREADY ;
input [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_RID ;
input [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_RDATA ;
input [2 - 1:0] m_axi_c_RRESP ;
input m_axi_c_RLAST ;
input [C_M_AXI_C_RUSER_WIDTH - 1:0] m_axi_c_RUSER ;
input m_axi_c_RVALID ;
output m_axi_c_RREADY ;


input [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR ;
input s_axi_CONTROL_AWVALID ;
output s_axi_CONTROL_AWREADY ;
input [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA ;
input [C_S_AXI_CONTROL_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_WSTRB ;
input s_axi_CONTROL_WVALID ;
output s_axi_CONTROL_WREADY ;
output [2 - 1:0] s_axi_CONTROL_BRESP ;
output s_axi_CONTROL_BVALID ;
input s_axi_CONTROL_BREADY ;
input [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR ;
input s_axi_CONTROL_ARVALID ;
output s_axi_CONTROL_ARREADY ;
output [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA ;
output [2 - 1:0] s_axi_CONTROL_RRESP ;
output s_axi_CONTROL_RVALID ;
input s_axi_CONTROL_RREADY ;
output interrupt ;

input aresetn ;

input aclk ;


wire [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_AWID;
wire [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_AWADDR;
wire [8 - 1:0] m_axi_a_AWLEN;
wire [3 - 1:0] m_axi_a_AWSIZE;
wire [2 - 1:0] m_axi_a_AWBURST;
wire [2 - 1:0] m_axi_a_AWLOCK;
wire [4 - 1:0] m_axi_a_AWCACHE;
wire [3 - 1:0] m_axi_a_AWPROT;
wire [4 - 1:0] m_axi_a_AWQOS;
wire [C_M_AXI_A_AWUSER_WIDTH - 1:0] m_axi_a_AWUSER;
wire m_axi_a_AWVALID;
wire m_axi_a_AWREADY;
wire [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_WDATA;
wire [C_M_AXI_A_DATA_WIDTH/8 - 1:0] m_axi_a_WSTRB;
wire m_axi_a_WLAST;
wire [C_M_AXI_A_WUSER_WIDTH - 1:0] m_axi_a_WUSER;
wire m_axi_a_WVALID;
wire m_axi_a_WREADY;
wire [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_BID;
wire [2 - 1:0] m_axi_a_BRESP;
wire [C_M_AXI_A_BUSER_WIDTH - 1:0] m_axi_a_BUSER;
wire m_axi_a_BVALID;
wire m_axi_a_BREADY;
wire [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_ARID;
wire [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_ARADDR;
wire [8 - 1:0] m_axi_a_ARLEN;
wire [3 - 1:0] m_axi_a_ARSIZE;
wire [2 - 1:0] m_axi_a_ARBURST;
wire [2 - 1:0] m_axi_a_ARLOCK;
wire [4 - 1:0] m_axi_a_ARCACHE;
wire [3 - 1:0] m_axi_a_ARPROT;
wire [4 - 1:0] m_axi_a_ARQOS;
wire [C_M_AXI_A_ARUSER_WIDTH - 1:0] m_axi_a_ARUSER;
wire m_axi_a_ARVALID;
wire m_axi_a_ARREADY;
wire [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_RID;
wire [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_RDATA;
wire [2 - 1:0] m_axi_a_RRESP;
wire m_axi_a_RLAST;
wire [C_M_AXI_A_RUSER_WIDTH - 1:0] m_axi_a_RUSER;
wire m_axi_a_RVALID;
wire m_axi_a_RREADY;


wire [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_AWID;
wire [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_AWADDR;
wire [8 - 1:0] m_axi_b_AWLEN;
wire [3 - 1:0] m_axi_b_AWSIZE;
wire [2 - 1:0] m_axi_b_AWBURST;
wire [2 - 1:0] m_axi_b_AWLOCK;
wire [4 - 1:0] m_axi_b_AWCACHE;
wire [3 - 1:0] m_axi_b_AWPROT;
wire [4 - 1:0] m_axi_b_AWQOS;
wire [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_b_AWUSER;
wire m_axi_b_AWVALID;
wire m_axi_b_AWREADY;
wire [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_WDATA;
wire [C_M_AXI_B_DATA_WIDTH/8 - 1:0] m_axi_b_WSTRB;
wire m_axi_b_WLAST;
wire [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_b_WUSER;
wire m_axi_b_WVALID;
wire m_axi_b_WREADY;
wire [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_BID;
wire [2 - 1:0] m_axi_b_BRESP;
wire [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_b_BUSER;
wire m_axi_b_BVALID;
wire m_axi_b_BREADY;
wire [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_ARID;
wire [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_ARADDR;
wire [8 - 1:0] m_axi_b_ARLEN;
wire [3 - 1:0] m_axi_b_ARSIZE;
wire [2 - 1:0] m_axi_b_ARBURST;
wire [2 - 1:0] m_axi_b_ARLOCK;
wire [4 - 1:0] m_axi_b_ARCACHE;
wire [3 - 1:0] m_axi_b_ARPROT;
wire [4 - 1:0] m_axi_b_ARQOS;
wire [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_b_ARUSER;
wire m_axi_b_ARVALID;
wire m_axi_b_ARREADY;
wire [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_RID;
wire [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_RDATA;
wire [2 - 1:0] m_axi_b_RRESP;
wire m_axi_b_RLAST;
wire [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_b_RUSER;
wire m_axi_b_RVALID;
wire m_axi_b_RREADY;


wire [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_AWID;
wire [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_AWADDR;
wire [8 - 1:0] m_axi_c_AWLEN;
wire [3 - 1:0] m_axi_c_AWSIZE;
wire [2 - 1:0] m_axi_c_AWBURST;
wire [2 - 1:0] m_axi_c_AWLOCK;
wire [4 - 1:0] m_axi_c_AWCACHE;
wire [3 - 1:0] m_axi_c_AWPROT;
wire [4 - 1:0] m_axi_c_AWQOS;
wire [C_M_AXI_C_AWUSER_WIDTH - 1:0] m_axi_c_AWUSER;
wire m_axi_c_AWVALID;
wire m_axi_c_AWREADY;
wire [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_WDATA;
wire [C_M_AXI_C_DATA_WIDTH/8 - 1:0] m_axi_c_WSTRB;
wire m_axi_c_WLAST;
wire [C_M_AXI_C_WUSER_WIDTH - 1:0] m_axi_c_WUSER;
wire m_axi_c_WVALID;
wire m_axi_c_WREADY;
wire [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_BID;
wire [2 - 1:0] m_axi_c_BRESP;
wire [C_M_AXI_C_BUSER_WIDTH - 1:0] m_axi_c_BUSER;
wire m_axi_c_BVALID;
wire m_axi_c_BREADY;
wire [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_ARID;
wire [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_ARADDR;
wire [8 - 1:0] m_axi_c_ARLEN;
wire [3 - 1:0] m_axi_c_ARSIZE;
wire [2 - 1:0] m_axi_c_ARBURST;
wire [2 - 1:0] m_axi_c_ARLOCK;
wire [4 - 1:0] m_axi_c_ARCACHE;
wire [3 - 1:0] m_axi_c_ARPROT;
wire [4 - 1:0] m_axi_c_ARQOS;
wire [C_M_AXI_C_ARUSER_WIDTH - 1:0] m_axi_c_ARUSER;
wire m_axi_c_ARVALID;
wire m_axi_c_ARREADY;
wire [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_RID;
wire [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_RDATA;
wire [2 - 1:0] m_axi_c_RRESP;
wire m_axi_c_RLAST;
wire [C_M_AXI_C_RUSER_WIDTH - 1:0] m_axi_c_RUSER;
wire m_axi_c_RVALID;
wire m_axi_c_RREADY;


wire [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
wire s_axi_CONTROL_AWVALID;
wire s_axi_CONTROL_AWREADY;
wire [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
wire [C_S_AXI_CONTROL_DATA_WIDTH/8 - 1:0] s_axi_CONTROL_WSTRB;
wire s_axi_CONTROL_WVALID;
wire s_axi_CONTROL_WREADY;
wire [2 - 1:0] s_axi_CONTROL_BRESP;
wire s_axi_CONTROL_BVALID;
wire s_axi_CONTROL_BREADY;
wire [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
wire s_axi_CONTROL_ARVALID;
wire s_axi_CONTROL_ARREADY;
wire [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
wire [2 - 1:0] s_axi_CONTROL_RRESP;
wire s_axi_CONTROL_RVALID;
wire s_axi_CONTROL_RREADY;
wire interrupt;

wire aresetn;


wire [256 - 1:0] sig_mmult_top_a_datain;
wire [256 - 1:0] sig_mmult_top_a_dataout;
wire [32 - 1:0] sig_mmult_top_a_address;
wire [32 - 1:0] sig_mmult_top_a_size;
wire sig_mmult_top_a_req_din;
wire sig_mmult_top_a_req_full_n;
wire sig_mmult_top_a_req_write;
wire sig_mmult_top_a_rsp_empty_n;
wire sig_mmult_top_a_rsp_read;

wire [256 - 1:0] sig_mmult_top_b_datain;
wire [256 - 1:0] sig_mmult_top_b_dataout;
wire [32 - 1:0] sig_mmult_top_b_address;
wire [32 - 1:0] sig_mmult_top_b_size;
wire sig_mmult_top_b_req_din;
wire sig_mmult_top_b_req_full_n;
wire sig_mmult_top_b_req_write;
wire sig_mmult_top_b_rsp_empty_n;
wire sig_mmult_top_b_rsp_read;

wire [256 - 1:0] sig_mmult_top_c_datain;
wire [256 - 1:0] sig_mmult_top_c_dataout;
wire [32 - 1:0] sig_mmult_top_c_address;
wire [32 - 1:0] sig_mmult_top_c_size;
wire sig_mmult_top_c_req_din;
wire sig_mmult_top_c_req_full_n;
wire sig_mmult_top_c_req_write;
wire sig_mmult_top_c_rsp_empty_n;
wire sig_mmult_top_c_rsp_read;

wire sig_mmult_top_ap_start;
wire sig_mmult_top_ap_ready;
wire sig_mmult_top_ap_done;
wire sig_mmult_top_ap_idle;

wire sig_mmult_top_ap_rst;



mmult_top mmult_top_U(
    .a_datain(sig_mmult_top_a_datain),
    .a_dataout(sig_mmult_top_a_dataout),
    .a_address(sig_mmult_top_a_address),
    .a_size(sig_mmult_top_a_size),
    .a_req_din(sig_mmult_top_a_req_din),
    .a_req_full_n(sig_mmult_top_a_req_full_n),
    .a_req_write(sig_mmult_top_a_req_write),
    .a_rsp_empty_n(sig_mmult_top_a_rsp_empty_n),
    .a_rsp_read(sig_mmult_top_a_rsp_read),
    .b_datain(sig_mmult_top_b_datain),
    .b_dataout(sig_mmult_top_b_dataout),
    .b_address(sig_mmult_top_b_address),
    .b_size(sig_mmult_top_b_size),
    .b_req_din(sig_mmult_top_b_req_din),
    .b_req_full_n(sig_mmult_top_b_req_full_n),
    .b_req_write(sig_mmult_top_b_req_write),
    .b_rsp_empty_n(sig_mmult_top_b_rsp_empty_n),
    .b_rsp_read(sig_mmult_top_b_rsp_read),
    .c_datain(sig_mmult_top_c_datain),
    .c_dataout(sig_mmult_top_c_dataout),
    .c_address(sig_mmult_top_c_address),
    .c_size(sig_mmult_top_c_size),
    .c_req_din(sig_mmult_top_c_req_din),
    .c_req_full_n(sig_mmult_top_c_req_full_n),
    .c_req_write(sig_mmult_top_c_req_write),
    .c_rsp_empty_n(sig_mmult_top_c_rsp_empty_n),
    .c_rsp_read(sig_mmult_top_c_rsp_read),
    .ap_start(sig_mmult_top_ap_start),
    .ap_ready(sig_mmult_top_ap_ready),
    .ap_done(sig_mmult_top_ap_done),
    .ap_idle(sig_mmult_top_ap_idle),
    .ap_rst(sig_mmult_top_ap_rst),
    .ap_clk(aclk)
);

mmult_top_a_if #(
    .C_ID_WIDTH(C_M_AXI_A_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_A_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_A_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_A_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_A_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_A_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_A_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_A_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_A_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_A_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_A_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_A_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_A_CACHE_VALUE))
mmult_top_a_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_mmult_top_a_datain),
    .USER_dataout(sig_mmult_top_a_dataout),
    .USER_address(sig_mmult_top_a_address),
    .USER_size(sig_mmult_top_a_size),
    .USER_req_din(sig_mmult_top_a_req_din),
    .USER_req_full_n(sig_mmult_top_a_req_full_n),
    .USER_req_write(sig_mmult_top_a_req_write),
    .USER_rsp_empty_n(sig_mmult_top_a_rsp_empty_n),
    .USER_rsp_read(sig_mmult_top_a_rsp_read),
    .AWID(m_axi_a_AWID),
    .AWADDR(m_axi_a_AWADDR),
    .AWLEN(m_axi_a_AWLEN),
    .AWSIZE(m_axi_a_AWSIZE),
    .AWBURST(m_axi_a_AWBURST),
    .AWLOCK(m_axi_a_AWLOCK),
    .AWCACHE(m_axi_a_AWCACHE),
    .AWPROT(m_axi_a_AWPROT),
    .AWQOS(m_axi_a_AWQOS),
    .AWUSER(m_axi_a_AWUSER),
    .AWVALID(m_axi_a_AWVALID),
    .AWREADY(m_axi_a_AWREADY),
    .WDATA(m_axi_a_WDATA),
    .WSTRB(m_axi_a_WSTRB),
    .WLAST(m_axi_a_WLAST),
    .WUSER(m_axi_a_WUSER),
    .WVALID(m_axi_a_WVALID),
    .WREADY(m_axi_a_WREADY),
    .BID(m_axi_a_BID),
    .BRESP(m_axi_a_BRESP),
    .BUSER(m_axi_a_BUSER),
    .BVALID(m_axi_a_BVALID),
    .BREADY(m_axi_a_BREADY),
    .ARID(m_axi_a_ARID),
    .ARADDR(m_axi_a_ARADDR),
    .ARLEN(m_axi_a_ARLEN),
    .ARSIZE(m_axi_a_ARSIZE),
    .ARBURST(m_axi_a_ARBURST),
    .ARLOCK(m_axi_a_ARLOCK),
    .ARCACHE(m_axi_a_ARCACHE),
    .ARPROT(m_axi_a_ARPROT),
    .ARQOS(m_axi_a_ARQOS),
    .ARUSER(m_axi_a_ARUSER),
    .ARVALID(m_axi_a_ARVALID),
    .ARREADY(m_axi_a_ARREADY),
    .RID(m_axi_a_RID),
    .RDATA(m_axi_a_RDATA),
    .RRESP(m_axi_a_RRESP),
    .RLAST(m_axi_a_RLAST),
    .RUSER(m_axi_a_RUSER),
    .RVALID(m_axi_a_RVALID),
    .RREADY(m_axi_a_RREADY));

mmult_top_b_if #(
    .C_ID_WIDTH(C_M_AXI_B_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_B_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_B_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_B_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_B_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_B_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_B_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_B_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_B_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_B_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_B_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_B_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_B_CACHE_VALUE))
mmult_top_b_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_mmult_top_b_datain),
    .USER_dataout(sig_mmult_top_b_dataout),
    .USER_address(sig_mmult_top_b_address),
    .USER_size(sig_mmult_top_b_size),
    .USER_req_din(sig_mmult_top_b_req_din),
    .USER_req_full_n(sig_mmult_top_b_req_full_n),
    .USER_req_write(sig_mmult_top_b_req_write),
    .USER_rsp_empty_n(sig_mmult_top_b_rsp_empty_n),
    .USER_rsp_read(sig_mmult_top_b_rsp_read),
    .AWID(m_axi_b_AWID),
    .AWADDR(m_axi_b_AWADDR),
    .AWLEN(m_axi_b_AWLEN),
    .AWSIZE(m_axi_b_AWSIZE),
    .AWBURST(m_axi_b_AWBURST),
    .AWLOCK(m_axi_b_AWLOCK),
    .AWCACHE(m_axi_b_AWCACHE),
    .AWPROT(m_axi_b_AWPROT),
    .AWQOS(m_axi_b_AWQOS),
    .AWUSER(m_axi_b_AWUSER),
    .AWVALID(m_axi_b_AWVALID),
    .AWREADY(m_axi_b_AWREADY),
    .WDATA(m_axi_b_WDATA),
    .WSTRB(m_axi_b_WSTRB),
    .WLAST(m_axi_b_WLAST),
    .WUSER(m_axi_b_WUSER),
    .WVALID(m_axi_b_WVALID),
    .WREADY(m_axi_b_WREADY),
    .BID(m_axi_b_BID),
    .BRESP(m_axi_b_BRESP),
    .BUSER(m_axi_b_BUSER),
    .BVALID(m_axi_b_BVALID),
    .BREADY(m_axi_b_BREADY),
    .ARID(m_axi_b_ARID),
    .ARADDR(m_axi_b_ARADDR),
    .ARLEN(m_axi_b_ARLEN),
    .ARSIZE(m_axi_b_ARSIZE),
    .ARBURST(m_axi_b_ARBURST),
    .ARLOCK(m_axi_b_ARLOCK),
    .ARCACHE(m_axi_b_ARCACHE),
    .ARPROT(m_axi_b_ARPROT),
    .ARQOS(m_axi_b_ARQOS),
    .ARUSER(m_axi_b_ARUSER),
    .ARVALID(m_axi_b_ARVALID),
    .ARREADY(m_axi_b_ARREADY),
    .RID(m_axi_b_RID),
    .RDATA(m_axi_b_RDATA),
    .RRESP(m_axi_b_RRESP),
    .RLAST(m_axi_b_RLAST),
    .RUSER(m_axi_b_RUSER),
    .RVALID(m_axi_b_RVALID),
    .RREADY(m_axi_b_RREADY));

mmult_top_c_if #(
    .C_ID_WIDTH(C_M_AXI_C_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_C_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_C_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_C_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_C_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_C_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_C_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_C_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_C_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_C_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_C_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_C_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_C_CACHE_VALUE))
mmult_top_c_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_mmult_top_c_datain),
    .USER_dataout(sig_mmult_top_c_dataout),
    .USER_address(sig_mmult_top_c_address),
    .USER_size(sig_mmult_top_c_size),
    .USER_req_din(sig_mmult_top_c_req_din),
    .USER_req_full_n(sig_mmult_top_c_req_full_n),
    .USER_req_write(sig_mmult_top_c_req_write),
    .USER_rsp_empty_n(sig_mmult_top_c_rsp_empty_n),
    .USER_rsp_read(sig_mmult_top_c_rsp_read),
    .AWID(m_axi_c_AWID),
    .AWADDR(m_axi_c_AWADDR),
    .AWLEN(m_axi_c_AWLEN),
    .AWSIZE(m_axi_c_AWSIZE),
    .AWBURST(m_axi_c_AWBURST),
    .AWLOCK(m_axi_c_AWLOCK),
    .AWCACHE(m_axi_c_AWCACHE),
    .AWPROT(m_axi_c_AWPROT),
    .AWQOS(m_axi_c_AWQOS),
    .AWUSER(m_axi_c_AWUSER),
    .AWVALID(m_axi_c_AWVALID),
    .AWREADY(m_axi_c_AWREADY),
    .WDATA(m_axi_c_WDATA),
    .WSTRB(m_axi_c_WSTRB),
    .WLAST(m_axi_c_WLAST),
    .WUSER(m_axi_c_WUSER),
    .WVALID(m_axi_c_WVALID),
    .WREADY(m_axi_c_WREADY),
    .BID(m_axi_c_BID),
    .BRESP(m_axi_c_BRESP),
    .BUSER(m_axi_c_BUSER),
    .BVALID(m_axi_c_BVALID),
    .BREADY(m_axi_c_BREADY),
    .ARID(m_axi_c_ARID),
    .ARADDR(m_axi_c_ARADDR),
    .ARLEN(m_axi_c_ARLEN),
    .ARSIZE(m_axi_c_ARSIZE),
    .ARBURST(m_axi_c_ARBURST),
    .ARLOCK(m_axi_c_ARLOCK),
    .ARCACHE(m_axi_c_ARCACHE),
    .ARPROT(m_axi_c_ARPROT),
    .ARQOS(m_axi_c_ARQOS),
    .ARUSER(m_axi_c_ARUSER),
    .ARVALID(m_axi_c_ARVALID),
    .ARREADY(m_axi_c_ARREADY),
    .RID(m_axi_c_RID),
    .RDATA(m_axi_c_RDATA),
    .RRESP(m_axi_c_RRESP),
    .RLAST(m_axi_c_RLAST),
    .RUSER(m_axi_c_RUSER),
    .RVALID(m_axi_c_RVALID),
    .RREADY(m_axi_c_RREADY));

mmult_top_CONTROL_if #(
    .C_ADDR_WIDTH(C_S_AXI_CONTROL_ADDR_WIDTH),
    .C_DATA_WIDTH(C_S_AXI_CONTROL_DATA_WIDTH))
mmult_top_CONTROL_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .I_ap_start(sig_mmult_top_ap_start),
    .O_ap_ready(sig_mmult_top_ap_ready),
    .O_ap_done(sig_mmult_top_ap_done),
    .O_ap_idle(sig_mmult_top_ap_idle),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .interrupt(interrupt));

mmult_top_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_mmult_top_ap_rst),
    .din(aresetn));

endmodule
